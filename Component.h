/**************************************************************************************************/

/*
* File: Components.h
* Author: Miguel A. Garcia & Rubi Ballesteros
* NetID: magarcia1
* Assignment #: 5
* Date: November/17/2015
*
* Description: Component.h contains the class declaration of the Component section that lists all nodes
* in the graph. Each component has a unique integer id. 
*
*/

/**************************************************************************************************/

#ifndef COMPONENT_H
#define COMPONENT_H

//------------------------------------------------------------------------------------------------
#include <string>
#include <vector>
#include "Inoutput.h"

using namespace std;
//------------------------------------------------------------------------------------------------

class Component {
private:
	int id;		//our unique identifier
	int toFullSchedule;
	int latency;
	int timeToSchedule;
	//int size;       //size of the component as an integer
	vector<Inoutput*> inputs;
	vector<Component*> predecessors;
	vector<Component*> successors;
	Inoutput* output;
	string type;
	string name;
	//string compSize; //size of the component as a string
	string operation;

	int scheduled; //The time in where the component was scheduled 
	int scheduledCompleted; //The time in where the component was fully scheduled
	int slack;

	Inoutput* ifCond;

	bool ifPred;
	int untilIF;


public:
	//The rest of the big 4 are auto-generated by the compiler

	//Only this way-point needs to be created
	//Initialization 
	Component();
	Component(int id, string atype, string aname);
	~Component();

	void setId(int newId) { this->id = newId; }
	void setLatency(int newLatency) { this->latency = newLatency; this->timeToSchedule = newLatency; }
	void setToFullSchedule(int aLatency){ this->toFullSchedule = aLatency; };
	//void setSize(int theSize) { this->size = theSize; }
	void insertInput(Inoutput* anInput) { this->inputs.push_back(anInput); };
	void replaceInput(int i, Inoutput* newPut) { this->inputs.at(i) = newPut; };
	void setOutput(Inoutput* anOutput) { this->output = anOutput; };
	void setType(string type) { this->type = type; };
	void setName(string name) { this->name = name; };
	//void setCompSize(string newCompSize) { this->compSize = newCompSize; }
	void setOperation(string anOperation) { this->operation = anOperation; };
	void setScheduled(int i) { this->scheduled = i; };
	void setSlack(int slack){ this->slack = slack; };
	void setScheduledCompleted(int i) { this->scheduledCompleted = i; };

	void setIfCond(Inoutput* acond) { this->ifCond = acond; };
	void setIfPred() { this->ifPred = !this->ifPred; };
	void setUntilIf(int i) { this->untilIF = i; }
	
	int getId() { return this->id; };
	int getLatency(){ return this->latency; };
	int getToFullSchedule(){ return this->toFullSchedule; };
	//int getSize() { return this->size; }
	int getInputSize() { return this->inputs.size(); };
	Inoutput* getInput(int i) { return this->inputs.at(i); };
	Inoutput* getOutput() { return this->output; }
	string getType() { return this->type; };
	string getName() { return this->name; };
	int getScheduledCompleted() { return this->scheduledCompleted; };

	Inoutput* getIfCond() { return this->ifCond; };
	bool getIfPred() { return this->ifPred; }
	int getUntilIf() { return this->untilIF; }

	//string getCompSize() { return this->compSize; } 
	string getOperation() { return this->operation; };
	int getScheduled() { return this->scheduled; };
	int getSlack(){ return this->slack; };
	int getTimeToSchedule(){ return this->timeToSchedule; }
	void decrementor(){	this->timeToSchedule = this->timeToSchedule - 1; }
	//Connecting the graph (not finished)
	void addSuccessor(Component* aSuccessor) { this->successors.push_back(aSuccessor); };
	void addPredecessor(Component* aPred) { this->predecessors.push_back(aPred); };
	
	int getSuccessorSize() { return this->successors.size(); };
	int getPredecessorSize() { return this->predecessors.size(); };

	Component* getSuccessor(int i) { return this->successors.at(i); };
	Component* getPredecessor(int i) { return this->predecessors.at(i); };



};
//------------------------------------------------------------------------------------------------

#endif

//------------------------------------------------------------------------------------------------
