/**************************************************************************************************/

/*
* File: Components.h
* Author: Miguel A. Garcia & Rubi Ballesteros
* NetID: magarcia1
* Assignment #: 5
* Date: November/17/2015
*
* Description: Component.h contains the class declaration of the Component section that lists all nodes
* in the graph. Each component has a unique integer id. 
*
*/

/**************************************************************************************************/

#ifndef COMPONENT_H
#define COMPONENT_H

//------------------------------------------------------------------------------------------------
#include <string>
#include <vector>
#include "Edge.h"

using namespace std;
//------------------------------------------------------------------------------------------------

class Component {
public:
	//The rest of the big 4 are auto-generated by the compiler

	//Only this way-point needs to be created
	//Initialization 
	Component();
	Component(int id, string atype, string aname);
	~Component();

	void setId(int newId) { this->id = newId; }
	void setLatency(int newLatency) { this->latency = newLatency;  }
	void setSize(int theSize) { this->size = theSize; }
	void insertInput(Edge anInput) { this->IOV.push_back(anInput); };
	void replaceInput(int i, Edge newPut) { this->IOV.at(i) = newPut; }
	//void setOutput(Edge anOutput) { this->output = anOutput; };
	void setType(string type) { this->type = type; };
	void setName(string name) { this->name = name; }
	void setCompSize(string newCompSize) { this->compSize = newCompSize; }
	
	int getId(){ return this->id; }
	int getLatency(){ return this->latency; }
	int getSize() { return this->size; }
	int getIOVize() { return this->IOV.size(); }
	Edge getInput(int i) { return this->IOV.at(i); }
	//Edge getOutput() { return this->output; }
	string getType() { return this->type; }
	string getName() { return this->name; }
	string getCompSize() { return this->compSize; } 

private:
	int id;		//our unique identifier
	int latency;
	int size;       //size of the component as an integer
	vector<Edge> IOV;
	vector<Component*> predecessors;
	//Edge* output;
	string type;
	string name;
	string compSize; //size of the component as a string
};
//------------------------------------------------------------------------------------------------

#endif

//------------------------------------------------------------------------------------------------
