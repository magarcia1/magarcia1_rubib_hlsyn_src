/**************************************************************************************************/

/*
* File: graph.h
* Author: Miguel A. Garcia & Rubi Ballesteros
* NetID: magarcia1
* Assignment #: 3
* Date: November/10/2014
*
* Description: Graph.h contains the definition of a class named Graph that consists mainly of
* two sections: Components (nodes) and Dependencies among operations (edges).
* two sections: WAYPOINTS (nodes) and STREETS (edges).

*
*/

/**************************************************************************************************/

#ifndef	GRAPH_H
#define GRAPH_H

#include <vector>
#include <string>
#include "Component.h"
#include "Dependencie.h"

using namespace std;

class Graph{
public:
	//all big 4 auto generated by the compiler

	//Loop through our Component vector to check if we have already the component we are trying to create.  
	//It returns FALSE if the component (node) already exists. However, if indeed the component has not already 
	//been included in our component vector, insert is a new element of our vector. 
	bool addComponent(int myId, string name);
	std::vector<Component*> getComponents() { return this->components; }
	//Creates a new Dependencie for the graph and adds that Dependencie to the graph (and the src Components) dependencies list.
	//Returns true if successful, returns false if:
	//* srcId/dstId does not exists
	//* edge already exist
	bool addDependencie(int srcId, int dstId);
	std::vector<Dependencie*> getDependencies() const { return this->dependencies; }
	//returns NULL if the Id doesn't exist
	Component* getComponents(int id);

private:
	//all our waypoints
	std::vector<Component*> components;
	//all our streets
	std::vector<Dependencie*> dependencies;
};

#endif